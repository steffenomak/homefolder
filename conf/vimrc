set clipboard=unnamedplus
syntax enable

set nocompatible
filetype off

execute pathogen#infect()
filetype plugin indent on

set guioptions-=m
set guioptions-=T
set guioptions-=r
set tabstop=4
set shiftwidth=4
set expandtab
highlight OverLength ctermbg=red ctermfg=white guibg=#592929
match OverLength /\%81v.\+/
set nowrap
set ttyfast
set nocompatible
set nobackup
set nowritebackup
set ttimeoutlen=50
set laststatus=2

set smartindent
set cino+=(0
set cino+=:0
set cino+=g0
set cino+=N-s
set cino+=b1
set cino+=g1
set cino+=h3
set cino+=(0,W4

set autoread
set ruler
set cursorline

let $PYTHONPATH="/usr/lib/python3.4/site-packages"
let g:airline_powerline_fonts = 1
let g:airline#extensions#tabline#enabled = 1
let g:airline_theme='powerlineish'
let g:UltiSnipsExpandTrigger="<c-j>"
let g:UltiSnipsJumpForwardTrigger="<c-b>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"
let g:tagbar_type_rust = {
            \ 'ctagstype' : 'rust',
            \ 'kinds' : [
            \ 'f:function',
            \ 'T:types',
            \ 'm:types',
            \ 'm:modules',
            \ 'm:consts',
            \ 'm:traits',
            \ 'm:impls',
            \ 'M:macros'
            \ ]
            \ }
let mapleader=" "

let mapleader = " "
nmap <F8> :TagbarToggle<CR>
nmap <F9> :NERDTreeToggle<CR>
nmap ,d :Bdelete<CR>
nmap <F5> :make<CR>
nnoremap t <C-]>
nnoremap <leader>. :CtrlPTag<CR>


"let g:ycm_autoclose_preview_window_after_completion = 1

let g:solarized_termtrans=1
set background=dark
let base16colorspace=256
colorscheme base16-monokai
hi Normal ctermbg=none
if has('gui_running')
    set guifont=Fira\ Mono\ OT\ 9
endif

autocmd BufWritePre * :%s/\s\+$//e

set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

au FileType haskell nnoremap <buffer> <F1> :HdevtoolsType<CR>
au FileType haskell nnoremap <buffer> <silent> <F2> :HdevtoolsClear<CR>

let g:syntastic_haskell_hdevtools_args = '-g-Wall'

let g:tagbar_type_haskell = {
    \ 'ctagsbin'  : 'hasktags',
    \ 'ctagsargs' : '-x -c -o-',
    \ 'kinds'     : [
        \  'm:modules:0:1',
        \  'd:data: 0:1',
        \  'd_gadt: data gadt:0:1',
        \  't:type names:0:1',
        \  'nt:new types:0:1',
        \  'c:classes:0:1',
        \  'cons:constructors:1:1',
        \  'c_gadt:constructor gadt:1:1',
        \  'c_a:constructor accessors:1:1',
        \  'ft:function types:1:1',
        \  'fi:function implementations:0:1',
        \  'o:others:0:1'
    \ ],
    \ 'sro'        : '.',
    \ 'kind2scope' : {
        \ 'm' : 'module',
        \ 'c' : 'class',
        \ 'd' : 'data',
        \ 't' : 'type'
    \ },
    \ 'scope2kind' : {
        \ 'module' : 'm',
        \ 'class'  : 'c',
        \ 'data'   : 'd',
        \ 'type'   : 't'
    \ }
\ }
